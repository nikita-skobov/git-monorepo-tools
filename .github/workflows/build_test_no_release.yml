name: Build, and Test

defaults:
  run:
    shell: bash

on:
  workflow_dispatch:
    inputs:
      name:
        description: 'run manual test'
        default: 'manual'
        required: false
  pull_request:
    branches:
      - master

jobs:
  build_test:
    # The type of runner that the job will run on
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - { os: ubuntu-18.04 , target: i686-unknown-linux-gnu , usecross: true }
          - { os: ubuntu-18.04 , target: x86_64-unknown-linux-gnu , usecross: false }
          - { os: windows-latest, target: x86_64-pc-windows-msvc, usecross: false }
          - { os: windows-latest, target: i686-pc-windows-msvc, usecross: false }
    steps:
      - name: install_rust
        uses: actions-rs/toolchain@v1.0.6
        with:
          toolchain: stable
          target: ${{ matrix.job.target }}
          profile: minimal
      - name: install_bats
        run: |
          git clone https://github.com/bats-core/bats-core.git
          cd bats-core
          # git bash does not have sudo, so if on windows, just do regular install
          # but if on linux you need sudo to install this
          if [[ -d /c/ ]]; then
              ./install.sh $HOME
          else
              sudo ./install.sh /usr/local
          fi
          # check if its installed
          bats --help
          
      - name: checkout_code
        uses: actions/checkout@v2.3.2
      - name: test_gitfilter_1
        uses: actions-rs/cargo@ae10961054e4aa8b4aa7dffede299aaf087aa33b
        working-directory: ./gitfilter
        with:
          use-cross: ${{ matrix.job.usecross }}
          command: build
          args: --release --examples --target=${{ matrix.job.target }}
      - name: test_gitfilter_2
        uses: actions-rs/cargo@ae10961054e4aa8b4aa7dffede299aaf087aa33b
        working-directory: ./gitfilter
        with:
          use-cross: ${{ matrix.job.usecross }}
          command: test
          args: --target=${{ matrix.job.target }}
      - name: test_gitfilter_3
        working-directory: ./gitfilter
        run: bash -c "bats tests/gfr-simple.bats"
        env:
          GITFILTERCLI: ./target/${{ matrix.job.target }}/release/examples/gitfiltercli
      - name: test_gitfilter_4
        working-directory: ./gitfilter
        run: bash -c "bats tests/gfr-simple-two.bats"
        env:
          GITFILTERCLI: ./target/${{ matrix.job.target }}/release/examples/gitfiltercli
      - name: build_executable
        uses: actions-rs/cargo@ae10961054e4aa8b4aa7dffede299aaf087aa33b
        with:
          use-cross: ${{ matrix.job.usecross }}
          command: build
          args: --release --target=${{ matrix.job.target }}
      - name: make_mgt_executable
        run: bash .github/make-mgt-executable.sh ${{ matrix.job.target }}

      # this works on linux but not windows for some reason...
      #       - name: echotest222
      #         run: echo ::set-env name=PROGRAM_PATH::$(realpath ./target/${{ matrix.job.target }}/release/mgt)

      # just a sanity check that it is executable...
      - name: program_help_test
        run: mgt -h
      - name: unit_test
        uses: actions-rs/cargo@ae10961054e4aa8b4aa7dffede299aaf087aa33b
        with:
          use-cross: ${{ matrix.job.usecross }}
          command: test
          args: --target=${{ matrix.job.target }}
      - name: e2e_test_general
        run: bash -c "bats test/general"
        env:
          PROGRAM_PATH: mgt
      - name: e2e_test_splitout
        run: bash -c "bats test/splitout"
        env:
          PROGRAM_PATH: mgt
      - name: e2e_test_splitoutas
        run: bash -c "bats test/splitoutas"
        env:
          PROGRAM_PATH: mgt
      - name: e2e_test_splitin
        run: bash -c "bats test/splitin"
        env:
          PROGRAM_PATH: mgt
      - name: e2e_test_splitinas
        run: bash -c "bats test/splitinas"
        env:
          PROGRAM_PATH: mgt
      - name: e2e_test_topbase
        run: bash -c "bats test/topbase"
        env:
          PROGRAM_PATH: mgt
      - name: e2e_test_check
        run: bash -c "bats test/check"
        env:
          PROGRAM_PATH: mgt
      - name: e2e_test_sync
        run: bash -c "bats test/sync"
        env:
          PROGRAM_PATH: mgt
