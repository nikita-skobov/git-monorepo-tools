name: Build, Test, Release, and Update docs

on:
  workflow_dispatch:
    inputs:
      name:
        description: 'release tag version'
        default: 'vX.Y.Z'
        required: true

jobs:
  build_test:
    # The type of runner that the job will run on
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - { os: ubuntu-18.04 , target: i686-unknown-linux-gnu , usecross: true }
          - { os: ubuntu-18.04 , target: x86_64-unknown-linux-gnu , usecross: false }
          - { os: windows-latest, target: x86_64-pc-windows-msvc, usecross: false }
          - { os: windows-latest, target: i686-pc-windows-msvc, usecross: false }
    steps:
      - name: install_rust
        uses: actions-rs/toolchain@v1.0.6
        with:
          toolchain: stable
          target: ${{ matrix.job.target }}
          profile: minimal
      - name: install_bats
        uses: mig4/setup-bats@v1.0.1
      - name: checkout_code
        uses: actions/checkout@v2.3.2
      - name: install_git_filter_repo
        run: bash .github/install-git-filter-repo.sh ${{ matrix.job.os }}
      - name: build_executable
        uses: actions-rs/cargo@ae10961054e4aa8b4aa7dffede299aaf087aa33b
        with:
          use-cross: ${{ matrix.job.usecross }}
          command: build
          args: --release --target=${{ matrix.job.target }}
      - name: make_mgt_executable
        run: bash .github/make-mgt-executable.sh ${{ matrix.job.target }}

      # this works on linux but not windows for some reason...
      #       - name: echotest222
      #         run: echo ::set-env name=PROGRAM_PATH::$(realpath ./target/${{ matrix.job.target }}/release/mgt)

      # just a sanity check that it is executable...
      - name: program_help_test
        run: mgt -h
      - name: unit_test
        uses: actions-rs/cargo@ae10961054e4aa8b4aa7dffede299aaf087aa33b
        with:
          use-cross: ${{ matrix.job.usecross }}
          command: test
          args: --release --target=${{ matrix.job.target }}
      - name: e2e_test_general
        run: bash -c "bats test/general"
        env:
          PROGRAM_PATH: mgt
      - name: e2e_test_splitout
        run: bash -c "bats test/splitout"
        env:
          PROGRAM_PATH: mgt
      - name: e2e_test_splitoutas
        run: bash -c "bats test/splitoutas"
        env:
          PROGRAM_PATH: mgt
      - name: e2e_test_splitin
        run: bash -c "bats test/splitin"
        env:
          PROGRAM_PATH: mgt
      - name: e2e_test_splitinas
        run: bash -c "bats test/splitinas"
        env:
          PROGRAM_PATH: mgt
      - name: e2e_test_topbase
        run: bash -c "bats test/topbase"
        env:
          PROGRAM_PATH: mgt
      - name: e2e_test_checkupdates
        run: bash -c "bats test/checkupdates"
        env:
          PROGRAM_PATH: mgt
      - name: upload_artifact
        uses: actions/upload-artifact@v2.1.4
        with:
          name: mgt-${{ matrix.job.target }}
          path: ./target/${{ matrix.job.target }}/release/
  release:
    needs: build_test
    runs-on: ubuntu-latest
    steps:
      - name: download_all_artifacts
        uses: actions/download-artifact@v2.0.5
      - name: lstest
        run: ls -l
      - name: create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.name }}
          release_name: ${{ github.event.inputs.name }}
          body: |
            TODO: fill this in
          draft: false
          prerelease: true
      - name: pack_asset_windows_64
        run: zip -j mgt-windows-64 ./mgt-x86_64-pc-windows-msvc/mgt.exe
      - name: upload_asset_windows_64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with: 
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./mgt-windows-64.zip
          asset_name: mgt-${{ github.event.inputs.name }}-windows-64.zip
          asset_content_type: application/zip
      - name: pack_asset_windows_32
        run: zip -j mgt-windows-32 ./mgt-i686-pc-windows-msvc/mgt.exe
      - name: upload_asset_windows_32
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with: 
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./mgt-windows-32.zip
          asset_name: mgt-${{ github.event.inputs.name }}-windows-32.zip
          asset_content_type: application/zip
      - name: pack_asset_linux_64
        run: zip -j mgt-linux-64 ./mgt-x86_64-unknown-linux-gnu/mgt
      - name: upload_asset_linux_64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with: 
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./mgt-linux-64.zip
          asset_name: mgt-${{ github.event.inputs.name }}-linux-64.zip
          asset_content_type: application/zip
      - name: pack_asset_linux_32
        run: zip -j mgt-linux-32 ./mgt-i686-unknown-linux-gnu/mgt
      - name: upload_asset_linux_32
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with: 
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./mgt-linux-32.zip
          asset_name: mgt-${{ github.event.inputs.name }}-linux-32.zip
          asset_content_type: application/zip
  publish_docs:
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: checkout_code
        uses: actions/checkout@v2.3.2
      - name: download_artifact
        uses: actions/download-artifact@v2.0.5
        with:
          name: mgt-x86_64-unknown-linux-gnu
          path: ./target/release
      - name: lstest
        run: ls -l ./target/release/mgt
      - name: make_mgt_executable
        run: chmod +x ./target/release/mgt
      - name: helptest
        run: ./target/release/mgt --help
      - name: update_docs
        run: ./doc/gen_docs.sh
      - name: git_config
        run: git config --local user.name "github_CI" && git config --local user.email "github_CI"
      - name: commit_and_push_new_docs
        continue-on-error: true
        run: git add doc/ && git commit -m "updates docs for ${{ github.event.inputs.name }}" && git push
